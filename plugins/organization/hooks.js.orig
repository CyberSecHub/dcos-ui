import _ from 'underscore';
import {Route, Redirect} from 'react-router';

<<<<<<< e239b6b5ae56625dfd921fdda15e39cce5ad44c0
const PluginHooks = {
  /**
   * @param  {Object} Hooks The Hooks API
   */
  initialize(Hooks) {
    Hooks.addFilter('SettingsRoutes', this.appendRoutes.bind(this, Hooks));
    Hooks.addFilter('SettingsTabs', this.getTabs.bind(this));
  },

  getTabs(tabs) {
    return _.extend(tabs, {
      'settings-organization': {
        content: 'Organization',
        priority: 20
      }
    });
  },

  getOrganizationRoutes(Hooks) {
    // Return filtered Routes
    return this.getFilteredRoutes(
      // Pass in Object so Plugins can mutate routes and the default redirect
      Hooks.applyFilter('OrganizationRoutes', {
        routes: [],
        redirect: {
          type: Redirect,
          from: '/settings/?',
          to: 'settings-system'
=======
module.exports = (PluginSDK) => {

  let {Hooks} = PluginSDK;

  const OrganizationPluginHooks = {

    defaults: {

      redirect: {
        type: Redirect,
        from: '/settings/?',
        to: 'settings-organization'
      },
      organizationRoutes: [],

      settingsTabs: {
        'settings-organization': {
          content: 'Organization',
          priority: 20
>>>>>>> Mostly complete plugin system.
        }
      }
    },

<<<<<<< e239b6b5ae56625dfd921fdda15e39cce5ad44c0
  getFilteredRoutes(filteredRoutes) {
    return filteredRoutes.routes.concat([filteredRoutes.redirect]);
  },

  appendRoutes(Hooks, route) {
    let childRoutes = this.getOrganizationRoutes(Hooks);

    route.redirect = {
      type: Redirect,
      from: '/settings/?',
      to: 'settings-organization'
    };
    route.routes.push(
      {
        type: Route,
        name: 'settings-organization',
        path: 'organization/?',
        children: childRoutes
      }
    );
    return route;
  }
};
=======
    initialize() {
      Hooks.addFilter('getSettingsRoutes', this.getRoutes.bind(this));
      Hooks.addFilter('getSettingsTabs', this.getTabs.bind(this));
    },

    getTabs(tabs) {
      return _.extend(tabs, this.defaults.settingsTabs);
    },

    getOrganizationRoutes() {
      // Return filtered Routes
      return this.getFilteredRoutes(
        // Pass in Object so Plugins can mutate routes and the default redirect
        Hooks.applyFilter('getOrganizationRoutes', {
          routes: [].slice.call(this.defaults.organizationRoutes),
          redirect: {
            type: Redirect,
            from: '/settings/?',
            to: 'settings-system'
          }
        })
      );
    },

    getFilteredRoutes(filteredRoutes) {
      // Push redirect onto Routes Array
      return filteredRoutes.routes.concat([filteredRoutes.redirect]);
    },

    getRoutes(route) {
      let childRoutes = this.getOrganizationRoutes();
>>>>>>> Mostly complete plugin system.

      route.redirect = this.defaults.redirect;
      route.routes.push(
        {
          type: Route,
          name: 'settings-organization',
          path: 'organization/?',
          children: childRoutes
        }
      );
      return route;
    }
  };

  return OrganizationPluginHooks;
};
