import _ from 'underscore';
/*eslint-disable no-unused-vars*/
import React from 'react';
/*eslint-enable no-unused-vars*/
import {Route} from 'react-router';

<<<<<<< e239b6b5ae56625dfd921fdda15e39cce5ad44c0
import GroupsTab from './pages/GroupsTab';

let PluginHooks = {
  configuration: {
    enabled: false
  },

  getOrganizationRoutes(route) {
    route.routes.push({
      type: Route,
      name: 'settings-organization-groups',
      path: 'groups/?',
      handler: GroupsTab,
      children: [{
        type: Route,
        name: 'settings-organization-groups-group-panel',
        path: ':groupID'
      }]
    });
    return route;
  },

  /**
   * @param  {Object} Hooks The Hooks API
   */
  initialize(Hooks) {
    Hooks.addFilter('OrganizationRoutes', this.getOrganizationRoutes.bind(this));

    Hooks.addFilter('settings-organization-tabs',
      this.getTabs.bind(this));
  },

  getTabs(tabs) {
    return _.extend(tabs, {
      'settings-organization-groups': {
        content: 'Groups',
        priority: 20
      }
    });
  }
};
=======
import _GroupsTab from './pages/GroupsTab';

module.exports = (PluginSDK) => {

  let GroupsTab = _GroupsTab(PluginSDK);
  let {Hooks} = PluginSDK;

  let GroupsPluginHooks = {
    configuration: {
      enabled: false
    },

    defaults: {
      route: {
        type: Route,
        name: 'settings-organization-groups',
        path: 'groups/?',
        handler: GroupsTab,
        children: [{
          type: Route,
          name: 'settings-organization-groups-group-panel',
          path: ':groupID'
        }]
      },
      tabs: {
        'settings-organization-groups': {
          content: 'Groups',
          priority: 20
        }
      }
    },

    getOrganizationRoutes(route) {
      route.routes.push(this.defaults.route);
      return route;
    },

    initialize() {
      Hooks.addFilter('getOrganizationRoutes', this.getOrganizationRoutes.bind(this));
>>>>>>> Mostly complete plugin system.

      Hooks.addFilter('getTabsFor_settings-organization',
        this.getTabs.bind(this));
    },

    getTabs(tabs) {
      return _.extend(tabs, this.defaults.tabs);
    }
  };

  return GroupsPluginHooks;
};
