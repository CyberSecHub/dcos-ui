 #%RAML 0.8
title: Unit Health Checks API Spec
version: v1
baseUri: /api/{version}/system/health
mediaType: application/json
schemas:
  - units: !include ../../schema/unit-health/units.json
  - unit: !include ../../schema/unit-health/unit.json
  - nodes: !include ../../schema/unit-health/nodes.json
  - node: !include ../../schema/unit-health/node.json
  - report: !include ../../schema/unit-health/report.json

/units:
  displayName: Units Health
  get:
    description: Get a list of units and their health status.
    responses:
      200:
        description: Successful response.
        body:
          application/json:
            schema: units
            example: |
              {
                "array": [
                  {
                    "unit_id": "marathon_service", # Is the unit family
                    "unit_description": "marathon service",
                    "unit_health": 0,
                    "unit_check_output": "OK"
                  },
                  {
                    "unit_id": "mesos_dns_service",
                    "unit_description": "mesos dns service",
                    "unit_health": 1,
                    "unit_check_output": "Mesos Dns Service failed to start on host ip-10.0.0.1. Please see `systemctl -u mesos-dns.service` for more information"
                  },
                  {
                    "unit_id": "mesos_master_service",
                    "unit_description": "mesos master service",
                    "unit_health": 0,
                    "unit_check_output": "OK"
                  },
                  {
                    "unit_id": "nginx_service",
                    "unit_description": "nginx service",
                    "unit_health": 0,
                    "unit_check_output": "OK"
                  }
                ]
              }

  /{unit-id}:
    uriParameters:
      unit-id:
        description: Requested unit.
        type: string
    displayName: Unit Health
    get:
      description: Get the unit health summaries by node_id.
      responses:
        200:
          description: Successful response.
          body:
            application/json:
              schema: unit
              example: |
                # Example query for nginx_service in a 3-master cluster would return the unit
                # health on the 3 masters on which that unit runs.
                {
                  "unit_id": "nginx_service",
                  "unit_description": "nginx service",
                  "unit_health": 0,
                  "unit_check_output": "OK"
                }

    /nodes:
      displayName: Unit Nodes Health
      get:
        description: Get a list of the units node health summaries.
        responses:
          200:
            description: Successful response.
            body:
              application/json:
                schema: nodes
                example: |
                  # Example response from a 2-node cluster where one node has units with health > 0
                  {
                    "array": [
                      {
                        "node_id": "ip-10-10-0-235",
                        "node_role": "master",
                        "node_health": 0,
                      },
                      {
                        "node_id": "ip-10-10-0-236",
                        "node_role": "agent",
                        "node_health": 1
                      }
                    ]
                  }
      # Must ensure all node_id's contain are hyphened and not "." separated. Only matters if we go
      # through a proxy of some sort, but generally not great to "." separate in our URL requested.
      /{node-id}:
        uriParameters:
          node-id:
            description: Requested node.
            type: string
        displayName: Node Health
        get:
          description: Get node health status.
          responses:
            200:
              description: Successful response.
              body:
                application/json:
                  schema: node
                  example: |
                    # Example response from a healthy node with all units == 0
                    {
                      "node_id": "ip-10-10-0-236",
                      "node_role": "agent",
                      "node_health": 1,
                      "unit_check_output": "Mesos Dns Service failed to start on host ip-10.0.0.1. Please see `systemctl -u mesos-dns.service` for more information"
                    }

# This is possibly just a 301 -> /nodes, lets disucss.
/report:
  displayName: Health Report
  get:
    description: Get a full report of units' health.
    responses:
      200:
        description: Successful response.
        headers:
          Content-Disposition:
            type: string
            required: true
            example: |
              Content-Disposition:
              attachment; filename="report.txt"
