 #%RAML 0.8
title: Component Health Checks API Spec
version: v1
baseUri: /api/{version}/system/health
mediaType: application/json
schemas:
  - components: !include ../../schema/component-health/components.json
  - component: !include ../../schema/component-health/component.json
  - nodes: !include ../../schema/component-health/nodes.json
  - node: !include ../../schema/component-health/node.json
  - report: !include ../../schema/component-health/report.json

/components:
  displayName: Components Health
  get:
    description: Get a list of components and their health status.
    responses:
      200:
        description: Successful response.
        body:
          application/json:
            schema: components
            example: |
              {
                "components": [
                  {
                    "component_id": "marathon_service",
                    "component_description": "marathon service",
                    "component_health": 0,
                    # Possibly a "family" since a component may have several "services"
                    # This could make it easier to aggregate health by family instead 
                    # of individual component names. 
                    "component_family": "marathon"
                  },
                  {
                    "component_id": "mesos_dns_service",
                    "component_description": "mesos dns service",
                    "component_health": 0
                  },
                  {
                    "component_id": "mesos_master_service",
                    "component_description": "mesos master service",
                    "component_health": 0
                  },
                  # Example of instance were component_family would be useful. Nginx has several
                  # "services" to determine it's final state. Howewver, the nginx_service itself
                  # will not be healthy if the reload or timer is not, so those can simply be 
                  # ignored and instead we can just parse for nginx_service. 
                  {
                    "component_id": "nginx_reload_service",
                    "component_description": "nginx reload service",
                    "component_health": 0
                  },
                  {
                    "component_id": "nginx_reload_timer",
                    "component_description": "nginx reload timer",
                    "component_health": 0
                  },
                  {
                    "component_id": "nginx_service",
                    "component_description": "nginx service",
                    "component_health": 0
                  }
                ]
              }

  /{component-id}:
    uriParameters:
      component-id:
        description: Requested component.
        type: string
    displayName: Component Health
    get:
      description: Get the component health summaries by node_id.
      responses:
        200:
          description: Successful response.
          body:
            application/json:
              schema: component
              example: |
              # Example query for nginx_service in a 3-master cluster would return the component 
              # health on the 3 masters on which that component runs. 
              {
                "nodes" [
                  {
                    "node_id": "ip-10-10-0-234",
                    "node_family": "master",
                    "component_id": "nginx_service",
                    "component_description": "nginx service",
                    "health": 1,
                    "output": "FAILED"
                  },
                  {
                    "node_id": "ip-10-10-0-235",
                    "node_family": "master",
                    "component_id": "nginx_service",
                    "component_description": "nginx service",
                    "health": 0,
                    "output": "SUCCESS"
                  },
                  {
                    "node_id": "ip-10-10-0-236",
                    "node_family": "master",
                    "component_id": "nginx_service",
                    "component_description": "nginx service",
                    "health": 0,
                    "output": "SUCCESS"
                  }
                ]
              }
  /{component-id}/summary:
    uriParameters:
      component-id:
        description: Requested component summary of health.
        type: string
    displayName: Component Health Summary
    get:
      description: Get the component health summary. Aggregates for most unhealthy state across all node_ids. 
      responses:
        200:
          description: Successful response.
          body:
            application/json:
              schema: component
              example: |
                # Example response from query for nginx_service where nginx health > 0 on some node_id
                {
                  "component_id": "nginx_service",
                  "component_description": "nginx service",
                  "health": 1,
                  "output": "FAILED"
                }
    /nodes:
      displayName: Node Health
      get:
        description: Get a list of a nodes and their healths. Show failed components if health is > 0.
        responses:
          200:
            description: Successful response.
            body:
              application/json:
                schema: nodes
                example: |
                  # Example response from a 2-node cluster where one node has components with health > 0
                  {
                    "nodes": [
                      {
                        "node_id": "ip-10-10-0-235",
                        "node_family": "master",
                        "health": 0,
                        "failed_component_ids": {
                          "mesos_master_service": {
                            "output": "FAILED",
                            "health": 1,
                          },
                          "nginx service": {
                            "output": "FAILED",
                            "health" 1,
                        }
                      },
                      {
                        "node_id": "ip-10-10-0-236",
                        "node_family": "agent",
                        "health": 0,
                        "failed_component_ids": []
                      }
                    ]
                  }
      # Must ensure all node_id's contain are hyphened and not "." separated. Only matters if we go 
      # through a proxy of some sort, but generally not great to "." separate in our URL requested. 
      /{node-id}:
        uriParameters:
          node-id:
            description: Requested node.
            type: string
        displayName: Node Health
        get:
          description: Get node health status.
          responses:
            200:
              description: Successful response.
              body:
                application/json:
                  schema: node
                  example: |
                    # Example response from a healthy node with all components == 0
                    {
                      "node_id": "ip-10-10-0-236",
                      "node_family": "agent",
                      "health": 0,
                      "failed_component_ids": []
                    }

# This is possibly just a 301 -> /nodes, lets disucss. 
/report:
  displayName: Health Report
  get:
    description: Get a full report of components' health.
    responses:
      200:
        description: Successful response.
        headers:
          Content-Disposition:
            type: string
            required: true
            example: |
              Content-Disposition:
              attachment; filename="report.txt"
